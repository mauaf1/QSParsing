name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: QSParsing.sln
      Test_Project_Path: QSParsingConsoleAppTest/QSParsingConsoleAppTest.csproj
      Wap_Project_Directory: QSParsingConsoleApp.Package
      Wap_Project_Path: QSParsingConsoleApp.Package/QSParsingConsoleApp.Package.wapproj

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Run unit tests
      run: dotnet test ${{ env.Test_Project_Path }}

    - name: Restore dependencies
      run: msbuild ${{ env.Solution_Name }} /t:Restore /p:Configuration=${{ matrix.configuration }}

    - name: Decode the signing certificate (.pfx)
      run: |
        $certificatePath = Join-Path -Path "${{ env.Wap_Project_Directory }}" -ChildPath "GitHubActionsWorkflow.pfx"
        $folder = Split-Path -Path $certificatePath -Parent
        if (!(Test-Path -Path $folder)) {
          New-Item -ItemType Directory -Path $folder | Out-Null
        }
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        [IO.File]::WriteAllBytes($certificatePath, $pfx_cert_byte)
      shell: pwsh

    - name: Create MSIX package
      run: msbuild ${{ env.Wap_Project_Path }} /p:Configuration=${{ matrix.configuration }} /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundle=Always /p:AppxBundlePlatforms="x86|x64" /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}

    - name: Clean up certificate
      run: Remove-Item -Path "${{ env.Wap_Project_Directory }}\GitHubActionsWorkflow.pfx" -Force
      shell: pwsh

    - name: Upload MSIX package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
